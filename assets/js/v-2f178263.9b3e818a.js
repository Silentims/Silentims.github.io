"use strict";(self.webpackChunkswbook=self.webpackChunkswbook||[]).push([[185],{9224:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-2f178263",path:"/about/about-algorithm-daily-challenge.html",title:"LeetCode  21 天挑战日志",lang:"zh-CN",frontmatter:{sidebar:"auto"},excerpt:"",headers:[{level:2,title:"为什么参加算法挑战 ？",slug:"为什么参加算法挑战",children:[]},{level:2,title:"课程目录",slug:"课程目录",children:[]},{level:2,title:"第一周 数组",slug:"第一周-数组",children:[{level:3,title:"Day01 原地修改数组",slug:"day01-原地修改数组",children:[]},{level:3,title:"Day02 前缀和技巧",slug:"day02-前缀和技巧",children:[]},{level:3,title:"Day03 差分数组技巧",slug:"day03-差分数组技巧",children:[]},{level:3,title:"Day04 回文串的判断",slug:"day04-回文串的判断",children:[]},{level:3,title:"Day05 二分搜索原理",slug:"day05-二分搜索原理",children:[]},{level:3,title:"Day06 二分搜索运用",slug:"day06-二分搜索运用",children:[]},{level:3,title:"Day07 滑动窗口技巧",slug:"day07-滑动窗口技巧",children:[]}]},{level:2,title:"第二周 链表、队列、栈、二叉树",slug:"第二周-链表、队列、栈、二叉树",children:[{level:3,title:"Day08 链表技巧汇总",slug:"day08-链表技巧汇总",children:[]},{level:3,title:"Day09 队列和栈互转",slug:"day09-队列和栈互转",children:[]},{level:3,title:"Day10 单调队列和单调栈",slug:"day10-单调队列和单调栈",children:[]},{level:3,title:"Day11 二叉树训练",slug:"day11-二叉树训练",children:[]},{level:3,title:"Day12 二叉搜索树基础",slug:"day12-二叉搜索树基础",children:[]},{level:3,title:"Day13 BFS搜索算法",slug:"day13-bfs搜索算法",children:[]},{level:3,title:"Day14 并查集（Union-Find）算法",slug:"day14-并查集-union-find-算法",children:[]}]},{level:2,title:"第三周：数据结构设计、回溯、递归",slug:"第三周-数据结构设计、回溯、递归",children:[{level:3,title:"Day15 LRU算法",slug:"day15-lru算法",children:[]},{level:3,title:"Day16 LFU算法",slug:"day16-lfu算法",children:[]},{level:3,title:"Day17 回溯算法原理",slug:"day17-回溯算法原理",children:[]},{level:3,title:"Day18 回溯算法运用",slug:"day18-回溯算法运用",children:[]},{level:3,title:"Day19 动态规划原理",slug:"day19-动态规划原理",children:[]}]}],filePathRelative:"about/about-algorithm-daily-challenge.md"}},6301:(n,s,a)=>{a.r(s),a.d(s,{default:()=>pa});var p=a(6252);const t=(0,p.uE)('<h1 id="leetcode-21-天挑战日志" tabindex="-1"><a class="header-anchor" href="#leetcode-21-天挑战日志" aria-hidden="true">#</a> LeetCode 21 天挑战日志</h1><p>写一个流水式日志，来记录自己在参加 21 天算法挑战过程中，刷题遇到的问题和一些想法：</p><h2 id="为什么参加算法挑战" tabindex="-1"><a class="header-anchor" href="#为什么参加算法挑战" aria-hidden="true">#</a> 为什么参加算法挑战 ？</h2><ol><li>算法一直是自己久攻不下和很难坚持下去的弱项。</li><li>许多大厂目前基本上都要考算法，即便是中小厂也会涉及算法题，虽然社招岗位对算法要求没有那么高，但是不能完全不会。</li><li>培养算法的思维，我觉得学习算法就是学习计算机思维，从计算机的角度思考代码实现，在日后的实际工作中也能多一个分析角度，对了解许多技术底层原理和选择合适的底层数据结构都有所帮助。</li></ol><h2 id="课程目录" tabindex="-1"><a class="header-anchor" href="#课程目录" aria-hidden="true">#</a> 课程目录</h2>',5),e={href:"https://www.yuque.com/books/share/f7a1194d-fe2f-4096-8548-a470790543d2",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("「帅张星球 21 天算法挑战计划」课程"),l=(0,p._)("h2",{id:"第一周-数组",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#第一周-数组","aria-hidden":"true"},"#"),(0,p.Uk)(" 第一周 数组")],-1),c=(0,p._)("h3",{id:"day01-原地修改数组",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#day01-原地修改数组","aria-hidden":"true"},"#"),(0,p.Uk)(" Day01 原地修改数组")],-1),r=(0,p._)("p",null,"今天是第一天，课程内容是「原地修改数组」",-1),u=(0,p._)("p",null,"必做作业有 2 题：",-1),i={href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("26. 删除排序数组中的重复项（简单）"),m={href:"https://leetcode-cn.com/problems/remove-element/",target:"_blank",rel:"noopener noreferrer"},b=(0,p.Uk)("27. 移除元素（简单）"),d=(0,p._)("p",null,"选做题有 2 题：",-1),h={href:"https://leetcode-cn.com/problems/move-zeroes/",target:"_blank",rel:"noopener noreferrer"},f=(0,p.Uk)("283. 移动零（简单）"),g={href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/",target:"_blank",rel:"noopener noreferrer"},y=(0,p.Uk)("83. 删除排序链表中的重复元素（简单）"),_=(0,p.uE)('<ul><li>整体感受：</li></ul><p>首先 4 题中有 2 题在 4 个月前刷过，分别是 27 和 283，即移除元素和移动零，虽然刷过，但是看完题目，依旧没什么思路，简单看了下课件分析后，回想起了双指针，所以后面解题思路就清晰一些，但是实际编码的质量不高，居然还会存在语法的问题属实不应该，其次判断条件的临界值没弄清楚，导致频繁出现数组越界的问题。不过比前几个月刷题的感觉要顺手多了，可能是最近看了许多与底层数据结构相关的内容有关系。</p><ul><li>主要收获：</li></ul><p>学习到有关数组双指针和链表入门的解题思路：</p><ol><li>双指针如果都是从左开始移动遍历，那么其中有一个负责移动探路，另一个完成赋值或替换，其中优化的题解中，还引入中间临时变量 temp 来交换（移除零这题）看完题解后有被“哇”到；</li><li>双指针也可以是左指针和右指针同时像中间移动，时间复杂度进一步降低；</li><li>链表的解题思路关键点在于 node 中的 next 指向；</li></ol><h3 id="day02-前缀和技巧" tabindex="-1"><a class="header-anchor" href="#day02-前缀和技巧" aria-hidden="true">#</a> Day02 前缀和技巧</h3><p>今天的课程是「day2. 前缀和技巧」</p><p>必做作业有 1 题：</p>',8),w={href:"https://leetcode-cn.com/problems/subarray-sum-equals-k/",target:"_blank",rel:"noopener noreferrer"},v=(0,p.Uk)("560. 和为 K 的子数组（中等）"),U=(0,p._)("p",null,"选做题有 1 题：",-1),x={href:"https://leetcode-cn.com/problems/range-sum-query-2d-immutable/",target:"_blank",rel:"noopener noreferrer"},W=(0,p.Uk)("304. 二维区域和检索 - 矩阵不可变（中等）"),D=(0,p._)("ul",null,[(0,p._)("li",null,"整体感受：")],-1),j=(0,p._)("p",null,"对于数组的解题思路有了新的收获，对于采用哈希表结构的解法开始理解有一些吃力，看完动图题解后恍然大悟",-1),L=(0,p._)("ul",null,[(0,p._)("li",null,"主要收获：")],-1),S=(0,p._)("p",null,"前缀和的应用场景是，需要对某个区间 [i...j] 频繁查询累计和，避免每次查询都遍历这个区间。",-1),E=(0,p._)("h3",{id:"day03-差分数组技巧",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#day03-差分数组技巧","aria-hidden":"true"},"#"),(0,p.Uk)(" Day03 差分数组技巧")],-1),I=(0,p._)("p",null,"今天的课程是「day3：差分数组技巧」",-1),q=(0,p._)("p",null,"必做作业有 1 题：",-1),F={href:"https://leetcode-cn.com/problems/car-pooling/",target:"_blank",rel:"noopener noreferrer"},C=(0,p.Uk)("1094. 拼车（中等）"),z=(0,p._)("p",null,"选做题有 1 题：",-1),A={href:"https://leetcode-cn.com/problems/corporate-flight-bookings/",target:"_blank",rel:"noopener noreferrer"},N=(0,p.Uk)("1109. 航班预订统计（中等）"),B=(0,p._)("ul",null,[(0,p._)("li",null,"整体感受与收获：")],-1),G=(0,p._)("p",null,"与前缀和的思路差不多，学习到了差分数组：",-1),M=(0,p._)("p",null,"差分数组的应用场景是，需要对某个区间 [i...j] 频繁地加或减某一值，避免每次都遍历这个区间。比如拼车的题中，既有上车，也有下车，所以可以遍历每个站点，上车的加人，下车的减人。而航班预定的题思路则是，遍历每一个航班，涉及出航定订单加，后边不涉及的减，本质上也是利用分差数组，即求区间 [i,j]，则从 i 开始往后的求和，减去 j+1 往后的求和，就是 i 到 j 之间的和。",-1),O=(0,p._)("h3",{id:"day04-回文串的判断",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#day04-回文串的判断","aria-hidden":"true"},"#"),(0,p.Uk)(" Day04 回文串的判断")],-1),T=(0,p._)("p",null,"今天的课程是「day4：回文串的判断」",-1),H=(0,p._)("p",null,"必做作业有 1 题：",-1),R={href:"https://leetcode-cn.com/problems/longest-palindromic-substring/",target:"_blank",rel:"noopener noreferrer"},K=(0,p.Uk)("5. 最长回文子串（中等）"),P=(0,p._)("ul",null,[(0,p._)("li",null,"整体感受：")],-1),V=(0,p._)("p",null,"注意理解此题的陷阱，并不是简单的反转找重复字符串，而是要找到数组从中间开始往两头遍历查找。不过此题还需要多理解，对于解法有些疑惑。",-1),Y=(0,p._)("h3",{id:"day05-二分搜索原理",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#day05-二分搜索原理","aria-hidden":"true"},"#"),(0,p.Uk)(" Day05 二分搜索原理")],-1),J=(0,p._)("p",null,"今天的课程是「day5：二分搜索原理」",-1),Q=(0,p._)("p",null,"必做作业有 1 题：",-1),X={href:"https://leetcode-cn.com/problems/binary-search/",target:"_blank",rel:"noopener noreferrer"},Z=(0,p.Uk)("704. 二分查找（简单）"),$=(0,p._)("p",null,"选做题 1 道：",-1),nn={href:"https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/",target:"_blank",rel:"noopener noreferrer"},sn=(0,p.Uk)("34. 在排序数组中查找元素的第一个和最后一个位置（中等）"),an=(0,p.uE)('<ul><li>整体感受</li></ul><p>技巧汇总：</p><p>使用左闭右闭的方式时，有几个需要注意的点：</p><ol><li>rigth = nums.length - 1</li><li>while(left &lt;= right) 因为右闭，所以不能漏掉最后一个元素，此处是有“=”的</li><li>int mid = left + (right - left) / 2; 等同于 (left + right) / 2；并且可以避免数值越界</li><li>nums[mid] &lt; target 则移动 left，相反则移动 right</li></ol><p>附 :</p><details class="custom-container details"><summary>二分法写法框架</summary><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//全部采用左闭右闭的写法</span>\n<span class="token comment">//普通二分查找</span>\n<span class="token keyword">int</span> <span class="token function">binary_search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> \n    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> \n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 直接返回</span>\n            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 直接返回</span>\n    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//寻找左侧边界的二分查找，在最后需要检查left的越界情况</span>\n<span class="token keyword">int</span> <span class="token function">left_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 别返回，锁定左侧边界</span>\n            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 最后要检查left越界的情况</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;=</span> nums<span class="token punctuation">.</span>length <span class="token operator">||</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> left<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//寻找右侧边界的二分查找，在最后需要检查right的越界情况</span>\n<span class="token keyword">int</span> <span class="token function">right_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 别返回，锁定右侧边界</span>\n            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 最后要检查 right 越界的情况</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> right<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div></details><h3 id="day06-二分搜索运用" tabindex="-1"><a class="header-anchor" href="#day06-二分搜索运用" aria-hidden="true">#</a> Day06 二分搜索运用</h3><p>大家早上好呀，今日份课程已经更新。</p><p>今天的课程是「day6：二分搜索运用」</p><p>必做作业有 1 题：</p>',10),pn={href:"https://leetcode-cn.com/problems/koko-eating-bananas/",target:"_blank",rel:"noopener noreferrer"},tn=(0,p.Uk)("875.爱吃香蕉的珂珂（中等）"),en=(0,p._)("p",null,"选做题 1 道：",-1),on={href:"https://leetcode-cn.com/problems/capacity-to-ship-packages-within-d-days/",target:"_blank",rel:"noopener noreferrer"},ln=(0,p.Uk)("1011.在D天内送达包裹的能力（中等）"),cn=(0,p.uE)('<ul><li>技巧</li></ul><p>想要用二分搜索算法解决问题，分为以下几步：</p><p><strong>1、确定</strong> <code>x, f(x), target</code> <strong>分别是什么，并写出函数</strong> <code>f</code> <strong>的代码</strong>。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">//这里写输入x和f(x)，返回具体的target，也就是输入对应数组下标和对应的值，反应出目标值的关系</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>2、找到</strong> <code>x</code> <strong>的取值范围作为二分搜索的搜索区间，初始化</strong> <code>left</code> <strong>和</strong> <code>right</code> <strong>变量</strong>。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token operator">?</span>\n<span class="token comment">//注意：有时候left，right如果已经给出，可以直接用，没有的话，则需要单独写一段逻辑计算</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>3、根据题目的要求，确定应该使用搜索左侧还是搜索右侧的二分搜索算法，写出解法代码</strong>。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token comment">//根据f(x)函数是查询左边界还是右边界来写逻辑</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token punctuation">}</span>els <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="day07-滑动窗口技巧" tabindex="-1"><a class="header-anchor" href="#day07-滑动窗口技巧" aria-hidden="true">#</a> Day07 滑动窗口技巧</h3><p>今天的课程是「day7：滑动窗口技巧」</p><p>必做作业有 1 题：</p>',11),rn={href:"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/",target:"_blank",rel:"noopener noreferrer"},un=(0,p.Uk)("3.无重复字符的最长子串（中等）"),kn=(0,p._)("p",null,"选做题 3 道：",-1),mn={href:"https://leetcode-cn.com/problems/permutation-in-string/",target:"_blank",rel:"noopener noreferrer"},bn=(0,p.Uk)("567.字符串的排列（中等）"),dn={href:"https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/",target:"_blank",rel:"noopener noreferrer"},hn=(0,p.Uk)("438.找到字符串中所有字母异位词（中等）"),fn={href:"https://leetcode-cn.com/problems/minimum-window-substring/",target:"_blank",rel:"noopener noreferrer"},gn=(0,p.Uk)("76.最小覆盖子串（困难）"),yn=(0,p.uE)('<ul><li>思路</li></ul><ol><li>定义[left,right)的滑动窗口<strong>左闭右开</strong>区间</li><li>向右滑动right，寻找一个「可行解」</li><li>向右滑动left，优化「可行解」</li></ol><ul><li>代码框架</li></ul><details class="custom-container details"><summary>第 567 题案例</summary><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkInclusion</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        \n        <span class="token comment">// 整体思路就是：左闭右开区间，双指针，先扩大右指针，直到窗口符合要求，然后缩小左指针，直到窗口不满足要求，此时窗口中就是所求的字串</span>\n\n        <span class="token comment">/*\n         * 具体思路：\n         * 1. 先将需要匹配的字符串放入need的HashMap中\n         * 2. 移动右指针，将符合的字符放入窗口中，直到满足全部字串字符\n         * 3. 移动左指针，直到窗口中字符不满足停下\n         * 4. 此时窗口中右指针 - 左指针 + 1，则为对应的字串\n         */</span>\n\n        <span class="token comment">/* 滑动窗口框架 */</span>\n\n        <span class="token comment">//1.定义窗口，need为符合条件的窗口，window为滑动窗口</span>\n        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> need <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//2.将need要检查的字符串放入map中</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> s1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            need<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> need<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">//3.初始化左右指针和valid</span>\n        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * 滑动窗口前，需要考虑的4个问题\n         * 1、当移动 right 扩大窗口，即加入字符时，应该更新哪些数据？window++，valid++\n         * 2、什么条件下，窗口应该暂停扩大，开始移动 left 缩小窗口？当Valid == need中元素的个数\n         * 3、当移动 left 缩小窗口，即移出字符时，应该更新哪些数据？window--，valid--\n         * 4、我们要的结果应该在扩大窗口时还是缩小窗口时进行更新？缩小窗口\n         */</span>\n        <span class="token comment">//4.扩大窗口</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// c 是将移入窗口的字符</span>\n            <span class="token keyword">char</span> c <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//right++表示先赋值，后运算</span>\n            \n            <span class="token comment">// 进行窗口内数据的一系列更新</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                window<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//这一步是校验need和window中是否都有字符c，有说明匹配</span>\n                    valid<span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token comment">// 5.缩小窗口，判断左侧窗口是否要收缩</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">==</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 在这里更新最小覆盖子串</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>valid <span class="token operator">==</span> need<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token comment">// d 是将移出窗口的字符</span>\n                <span class="token keyword">char</span> d <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token comment">// 进行窗口内数据的一系列更新</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                        valid<span class="token operator">--</span><span class="token punctuation">;</span>\n                    window<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br></div></div></details><h2 id="第二周-链表、队列、栈、二叉树" tabindex="-1"><a class="header-anchor" href="#第二周-链表、队列、栈、二叉树" aria-hidden="true">#</a> 第二周 链表、队列、栈、二叉树</h2><h3 id="day08-链表技巧汇总" tabindex="-1"><a class="header-anchor" href="#day08-链表技巧汇总" aria-hidden="true">#</a> Day08 链表技巧汇总</h3><p>今天的课程是「day8：链表技巧汇总」</p><p>必做作业有 2 题：</p>',8),_n={href:"https://leetcode-cn.com/problems/linked-list-cycle/",target:"_blank",rel:"noopener noreferrer"},wn=(0,p.Uk)("141.环形链表（简单）"),vn={href:"https://leetcode-cn.com/problems/middle-of-the-linked-list/",target:"_blank",rel:"noopener noreferrer"},Un=(0,p.Uk)("876.链表的中间结点（简单）"),xn=(0,p._)("p",null,"选做题 3 道：",-1),Wn={href:"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/",target:"_blank",rel:"noopener noreferrer"},Dn=(0,p.Uk)("160.相交链表（简单）"),jn={href:"https://leetcode-cn.com/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"},Ln=(0,p.Uk)("142.环形链表II（简单）"),Sn={href:"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/",target:"_blank",rel:"noopener noreferrer"},En=(0,p.Uk)("19.删除链表倒数第 N 个元素（中等）"),In=(0,p._)("h3",{id:"day09-队列和栈互转",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#day09-队列和栈互转","aria-hidden":"true"},"#"),(0,p.Uk)(" Day09 队列和栈互转")],-1),qn=(0,p._)("p",null,"今天的课程是「day9：队列和栈互转」",-1),Fn=(0,p._)("p",null,"必做作业有 2 题：",-1),Cn={href:"https://leetcode-cn.com/problems/implement-queue-using-stacks/",target:"_blank",rel:"noopener noreferrer"},zn=(0,p.Uk)("232.用栈实现队列（简单）"),An={href:"https://leetcode-cn.com/problems/implement-stack-using-queues/",target:"_blank",rel:"noopener noreferrer"},Nn=(0,p.Uk)("225.用队列实现栈（简单）"),Bn=(0,p._)("h3",{id:"day10-单调队列和单调栈",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#day10-单调队列和单调栈","aria-hidden":"true"},"#"),(0,p.Uk)(" Day10 单调队列和单调栈")],-1),Gn=(0,p._)("p",null,"必做作业有 1 题：",-1),Mn={href:"https://leetcode-cn.com/problems/next-greater-element-i/",target:"_blank",rel:"noopener noreferrer"},On=(0,p.Uk)("496.下一个更大元素I（简单）"),Tn=(0,p._)("p",null,"选做题 3 道：",-1),Hn={href:"https://leetcode-cn.com/problems/sliding-window-maximum/",target:"_blank",rel:"noopener noreferrer"},Rn=(0,p.Uk)("239.滑动窗口最大值（困难）"),Kn={href:"https://leetcode-cn.com/problems/daily-temperatures/",target:"_blank",rel:"noopener noreferrer"},Pn=(0,p.Uk)("739.每日温度（中等）"),Vn={href:"https://leetcode-cn.com/problems/next-greater-element-ii/",target:"_blank",rel:"noopener noreferrer"},Yn=(0,p.Uk)("503.下一个更大元素II（中等）"),Jn=(0,p.uE)('<details class="custom-container details"><summary>单调栈框架</summary><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 单调栈模板</span>\n<span class="token comment">// 每个元素最多入栈、出栈一次，因此时间复杂度为O(N)，空间复杂度O(N)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Module</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 获取每个元素右侧的较大值</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 记录较大值的值</span>\n        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token comment">// 维持递减单调栈 </span>\n        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 从右往左，考虑右边的较大值</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 弹出较小值</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">// 获取较大值</span>\n            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 入栈, 以stack[0]为栈顶,</span>\n            <span class="token comment">// 实际上调用了addFirst()</span>\n            <span class="token comment">// 使用add()则变成了队列，与其他方法操作的逻辑不同</span>\n            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 获取每个元素右侧较大值的索引</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextGreaterElementIdx</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 记录较大值的索引</span>\n        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token comment">// 维持递减单调栈</span>\n        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 从右往左，考虑右边的较大值</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 弹出较小值</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">// 获取较大值的索引</span>\n            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 入栈, 以stack[0]为栈顶,</span>\n            <span class="token comment">// 实际上调用了addFirst()</span>\n            <span class="token comment">// 使用add()则变成了队列，与其他方法操作的逻辑不同</span>\n            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 获取每个元素循环右侧较大值</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextCyclicGreaterElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 记录较大值</span>\n        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token comment">// 维持递减单调栈</span>\n        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 从右往左，考虑右边的较大值</span>\n        <span class="token comment">// 在右侧虚拟增加一个原数组</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 弹出较小值</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>i <span class="token operator">%</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">// 获取较大值</span>\n            res<span class="token punctuation">[</span>i <span class="token operator">%</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 入栈, 以stack[0]为栈顶,</span>\n            <span class="token comment">// 实际上调用了addFirst()</span>\n            <span class="token comment">// 使用add()则变成了队列，与其他方法操作的逻辑不同</span>\n            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">%</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n\n    <span class="token comment">// 测试用例</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">nextGreaterElement</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [4, 2, 4, -1, -1]</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">nextGreaterElementIdx</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3, 2, 3, -1, -1]</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">nextCyclicGreaterElement</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [4, 2, 4, -1, 4]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br></div></div></details><h3 id="day11-二叉树训练" tabindex="-1"><a class="header-anchor" href="#day11-二叉树训练" aria-hidden="true">#</a> Day11 二叉树训练</h3><p>今天的课程是「day11：二叉树训练」</p><p>必做作业有 2 题：</p>',4),Qn={href:"https://leetcode-cn.com/problems/invert-binary-tree/",target:"_blank",rel:"noopener noreferrer"},Xn=(0,p.Uk)("226.翻转二叉树（简单）"),Zn={href:"https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/",target:"_blank",rel:"noopener noreferrer"},$n=(0,p.Uk)("114.二叉树展开为链表（中等）"),ns=(0,p._)("p",null,"选做题 1 道：",-1),ss={href:"https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/",target:"_blank",rel:"noopener noreferrer"},as=(0,p.Uk)("116.填充每个节点的下一个右侧节点指针（中等）"),ps=(0,p.uE)('<ul><li>框架</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">/* 二叉树遍历框架 */</span>\n<span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 前序遍历</span>\n    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>\n    <span class="token comment">// 中序遍历</span>\n    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>\n    <span class="token comment">// 后序遍历</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>技巧</li></ul><p><strong>快速排序就是个二叉树的前序遍历，归并排序就是个二叉树的后序遍历</strong></p><p><strong>写递归算法的关键是要明确函数的「定义」是什么，然后相信这个定义，利用这个定义推导最终结果，绝不要跳入递归的细节</strong>。</p><p><strong>写树相关的算法，简单说就是，先搞清楚当前</strong> <code>**root**</code> <strong>节点「该做什么」以及「什么时候做」，然后根据函数定义递归调用子节点</strong>，递归调用会让孩子节点做相同的事情。</p><h3 id="day12-二叉搜索树基础" tabindex="-1"><a class="header-anchor" href="#day12-二叉搜索树基础" aria-hidden="true">#</a> Day12 二叉搜索树基础</h3><p>今天的课程是「day12：二叉搜索树基础」</p><p>必做作业有 2 题：</p>',9),ts={href:"https://leetcode-cn.com/problems/search-in-a-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},es=(0,p.Uk)("700.二叉搜索树中的搜索（简单）"),os={href:"https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},ls=(0,p.Uk)("701.二叉搜索树中的插入操作（中等）"),cs=(0,p._)("p",null,"选做题 2 道：",-1),rs={href:"https://leetcode-cn.com/problems/validate-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},us=(0,p.Uk)("98.验证二叉搜索树（中等）"),is={href:"https://leetcode-cn.com/problems/delete-node-in-a-bst/",target:"_blank",rel:"noopener noreferrer"},ks=(0,p.Uk)("450.删除二叉搜索树中的节点（中等）"),ms=(0,p.uE)('<ul><li>代码框架(抽象)</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">BST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">==</span> target<span class="token punctuation">)</span>\n        <span class="token comment">// 找到目标，做点什么</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> \n        <span class="token function">BST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> target<span class="token punctuation">)</span>\n        <span class="token function">BST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="day13-bfs搜索算法" tabindex="-1"><a class="header-anchor" href="#day13-bfs搜索算法" aria-hidden="true">#</a> Day13 BFS搜索算法</h3><p>今天的课程是「day13：BFS 搜索算法」</p><p>必做作业有 2 题：</p>',5),bs={href:"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/",target:"_blank",rel:"noopener noreferrer"},ds=(0,p.Uk)("102.二叉树的层序遍历"),hs={href:"https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/",target:"_blank",rel:"noopener noreferrer"},fs=(0,p.Uk)("111.二叉树的最小深度（简单）"),gs=(0,p._)("p",null,"选做题 1 道：",-1),ys={href:"https://leetcode-cn.com/problems/open-the-lock/",target:"_blank",rel:"noopener noreferrer"},_s=(0,p.Uk)("752.打开转盘锁（中等）"),ws=(0,p._)("h3",{id:"day14-并查集-union-find-算法",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#day14-并查集-union-find-算法","aria-hidden":"true"},"#"),(0,p.Uk)(" Day14 并查集（Union-Find）算法")],-1),vs=(0,p._)("p",null,"必做作业有 1 题：",-1),Us={href:"https://leetcode-cn.com/problems/satisfiability-of-equality-equations/",target:"_blank",rel:"noopener noreferrer"},xs=(0,p.Uk)("990.等式方程的可满足性（中等）"),Ws=(0,p._)("h2",{id:"第三周-数据结构设计、回溯、递归",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#第三周-数据结构设计、回溯、递归","aria-hidden":"true"},"#"),(0,p.Uk)(" 第三周：数据结构设计、回溯、递归")],-1),Ds=(0,p._)("h3",{id:"day15-lru算法",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#day15-lru算法","aria-hidden":"true"},"#"),(0,p.Uk)(" Day15 LRU算法")],-1),js=(0,p._)("p",null,"必做作业有 1 题：",-1),Ls={href:"https://leetcode-cn.com/problems/lru-cache/",target:"_blank",rel:"noopener noreferrer"},Ss=(0,p.Uk)("146.LRU缓存机制（中等）"),Es=(0,p._)("h3",{id:"day16-lfu算法",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#day16-lfu算法","aria-hidden":"true"},"#"),(0,p.Uk)(" Day16 LFU算法")],-1),Is=(0,p._)("p",null,"必做作业有 1 题：",-1),qs={href:"https://leetcode-cn.com/problems/lfu-cache/",target:"_blank",rel:"noopener noreferrer"},Fs=(0,p.Uk)("460.LFU缓存机制（困难）"),Cs=(0,p._)("h3",{id:"day17-回溯算法原理",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#day17-回溯算法原理","aria-hidden":"true"},"#"),(0,p.Uk)(" Day17 回溯算法原理")],-1),zs=(0,p._)("p",null,"必做作业有 1 题：",-1),As={href:"https://leetcode-cn.com/problems/permutations/",target:"_blank",rel:"noopener noreferrer"},Ns=(0,p.Uk)("46.全排列（中等）"),Bs=(0,p._)("p",null,"附加题 1 道：",-1),Gs={href:"https://leetcode-cn.com/problems/n-queens/",target:"_blank",rel:"noopener noreferrer"},Ms=(0,p.Uk)("51.N皇后（困难）"),Os=(0,p._)("h3",{id:"day18-回溯算法运用",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#day18-回溯算法运用","aria-hidden":"true"},"#"),(0,p.Uk)(" Day18 回溯算法运用")],-1),Ts=(0,p._)("p",null,"必做作业有 1 题：",-1),Hs={href:"https://leetcode-cn.com/problems/partition-to-k-equal-sum-subsets/",target:"_blank",rel:"noopener noreferrer"},Rs=(0,p.Uk)("698.划分为k个相等的子集（中等）"),Ks=(0,p._)("p",null,"附加题 1 道：",-1),Ps={href:"https://leetcode-cn.com/problems/generate-parentheses/",target:"_blank",rel:"noopener noreferrer"},Vs=(0,p.Uk)("22.括号生成（中等）"),Ys=(0,p._)("h3",{id:"day19-动态规划原理",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#day19-动态规划原理","aria-hidden":"true"},"#"),(0,p.Uk)(" Day19 动态规划原理")],-1),Js=(0,p._)("p",null,"必做作业有 2 题：",-1),Qs={href:"https://leetcode-cn.com/problems/fibonacci-number/",target:"_blank",rel:"noopener noreferrer"},Xs=(0,p.Uk)("509.斐波那契数（简单）"),Zs={href:"https://leetcode-cn.com/problems/coin-change/",target:"_blank",rel:"noopener noreferrer"},$s=(0,p.Uk)("322.零钱兑换（中等）"),na=(0,p._)("p",null,"附加题 1 道",-1),sa={href:"https://leetcode-cn.com/problems/climbing-stairs/",target:"_blank",rel:"noopener noreferrer"},aa=(0,p.Uk)("70.爬楼梯"),pa={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[(0,p._)("a",e,[o,(0,p.Wm)(a)])]),l,c,r,u,(0,p._)("p",null,[(0,p._)("a",i,[k,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",m,[b,(0,p.Wm)(a)])]),d,(0,p._)("p",null,[(0,p._)("a",h,[f,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",g,[y,(0,p.Wm)(a)])]),_,(0,p._)("p",null,[(0,p._)("a",w,[v,(0,p.Wm)(a)])]),U,(0,p._)("p",null,[(0,p._)("a",x,[W,(0,p.Wm)(a)])]),D,j,L,S,E,I,q,(0,p._)("p",null,[(0,p._)("a",F,[C,(0,p.Wm)(a)])]),z,(0,p._)("p",null,[(0,p._)("a",A,[N,(0,p.Wm)(a)])]),B,G,M,O,T,H,(0,p._)("p",null,[(0,p._)("a",R,[K,(0,p.Wm)(a)])]),P,V,Y,J,Q,(0,p._)("p",null,[(0,p._)("a",X,[Z,(0,p.Wm)(a)])]),$,(0,p._)("p",null,[(0,p._)("a",nn,[sn,(0,p.Wm)(a)])]),an,(0,p._)("p",null,[(0,p._)("a",pn,[tn,(0,p.Wm)(a)])]),en,(0,p._)("p",null,[(0,p._)("a",on,[ln,(0,p.Wm)(a)])]),cn,(0,p._)("p",null,[(0,p._)("a",rn,[un,(0,p.Wm)(a)])]),kn,(0,p._)("p",null,[(0,p._)("a",mn,[bn,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",dn,[hn,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",fn,[gn,(0,p.Wm)(a)])]),yn,(0,p._)("p",null,[(0,p._)("a",_n,[wn,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",vn,[Un,(0,p.Wm)(a)])]),xn,(0,p._)("p",null,[(0,p._)("a",Wn,[Dn,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",jn,[Ln,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",Sn,[En,(0,p.Wm)(a)])]),In,qn,Fn,(0,p._)("p",null,[(0,p._)("a",Cn,[zn,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",An,[Nn,(0,p.Wm)(a)])]),Bn,Gn,(0,p._)("p",null,[(0,p._)("a",Mn,[On,(0,p.Wm)(a)])]),Tn,(0,p._)("p",null,[(0,p._)("a",Hn,[Rn,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",Kn,[Pn,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",Vn,[Yn,(0,p.Wm)(a)])]),Jn,(0,p._)("p",null,[(0,p._)("a",Qn,[Xn,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",Zn,[$n,(0,p.Wm)(a)])]),ns,(0,p._)("p",null,[(0,p._)("a",ss,[as,(0,p.Wm)(a)])]),ps,(0,p._)("p",null,[(0,p._)("a",ts,[es,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",os,[ls,(0,p.Wm)(a)])]),cs,(0,p._)("p",null,[(0,p._)("a",rs,[us,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",is,[ks,(0,p.Wm)(a)])]),ms,(0,p._)("p",null,[(0,p._)("a",bs,[ds,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",hs,[fs,(0,p.Wm)(a)])]),gs,(0,p._)("p",null,[(0,p._)("a",ys,[_s,(0,p.Wm)(a)])]),ws,vs,(0,p._)("p",null,[(0,p._)("a",Us,[xs,(0,p.Wm)(a)])]),Ws,Ds,js,(0,p._)("p",null,[(0,p._)("a",Ls,[Ss,(0,p.Wm)(a)])]),Es,Is,(0,p._)("p",null,[(0,p._)("a",qs,[Fs,(0,p.Wm)(a)])]),Cs,zs,(0,p._)("p",null,[(0,p._)("a",As,[Ns,(0,p.Wm)(a)])]),Bs,(0,p._)("p",null,[(0,p._)("a",Gs,[Ms,(0,p.Wm)(a)])]),Os,Ts,(0,p._)("p",null,[(0,p._)("a",Hs,[Rs,(0,p.Wm)(a)])]),Ks,(0,p._)("p",null,[(0,p._)("a",Ps,[Vs,(0,p.Wm)(a)])]),Ys,Js,(0,p._)("p",null,[(0,p._)("a",Qs,[Xs,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",Zs,[$s,(0,p.Wm)(a)])]),na,(0,p._)("p",null,[(0,p._)("a",sa,[aa,(0,p.Wm)(a)])])],64)}}}}]);