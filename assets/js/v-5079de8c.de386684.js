"use strict";(self.webpackChunkswbook=self.webpackChunkswbook||[]).push([[262],{8588:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5079de8c",path:"/java/java-list-Arraylist.html",title:"ArrayList",lang:"zh-CN",frontmatter:{sidebar:"auto"},excerpt:"",headers:[{level:2,title:"基本用法",slug:"基本用法",children:[]},{level:2,title:"源码摘要(部分)",slug:"源码摘要-部分",children:[]},{level:2,title:"知识要点",slug:"知识要点",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],filePathRelative:"java/java-list-Arraylist.md"}},8643:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="arraylist" tabindex="-1"><a class="header-anchor" href="#arraylist" aria-hidden="true">#</a> ArrayList</h1><p>ArrayList是一个泛型容器，新建ArrayList需要实例化泛型参数。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> intList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> strList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token comment">//添加元素到末尾</span>\n<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//判断是否为空</span>\n<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//获取长度</span>\n<span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token comment">//访问指定位置的元素</span>\n<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token comment">//查找元素, 如果找到，返回索引位置，否则返回-1</span>\n<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token comment">//从后往前找</span>\n<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token comment">//是否包含指定元素,依据是equals方法的返回值</span>\n<span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token comment">//删除指定位置的元素, 返回值为被删对象</span>\n<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token comment">//删除指定对象，只删除第一个相同的对象，返回值表示是否删除了元素，如果o为null，则删除值为null的元素</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//删除所有元素</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token comment">//在指定位置插入元素，index为0表示插入最前面，index为ArrayList的长度表示插到最后面</span>\n<span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token comment">//修改指定位置的元素内容</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="源码摘要-部分" tabindex="-1"><a class="header-anchor" href="#源码摘要-部分" aria-hidden="true">#</a> 源码摘要(部分)</h2><ul><li>数据结构</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span>\n<span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>elementData</code>表示存储 Arraylist 元素的数组缓冲区。Arraylist 的容量是此数组缓冲区的长度。添加第一个元素时，任何为空的 Arraylist 都将扩展为默认容量（默认容量为 10）。</p><p><code>size</code> 表示 ArrayList 的大小（它包含的元素数）。</p><ul><li>构造函数</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//构造一个容量为 0 的空列表，即 elementData = {}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//构造具有指定初始容量大小的空列表。</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>新增元素</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">//添加元素之前，都需要进行剩余空间检查，如果需要则自动扩容</span>\n  <span class="token comment">//在没有超出数组大小的 add 时，不会触发复制</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//添加元素之前，都需要进行剩余空间检查，如果需要则自动扩容</span>\n  <span class="token comment">//与 add(E e)不同是，在非末尾位置添加元素，必会触发复制System.arraycopy</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//在末尾添加多个元素，也是先检查剩余空间，与 add(E e) 类似</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//在指定位置添加多个元素，也是先检查剩余空间，与 add(int index, E element)类似</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="知识要点" tabindex="-1"><a class="header-anchor" href="#知识要点" aria-hidden="true">#</a> 知识要点</h2><ul><li>ArrayList 就是数组列表，底层数据结构是数组Object [] elementData。</li><li>如果装载的是 8 种基础类型时，只能存储对应的包装类（为什么？往底层了说，因为定义在方法中局部变量的基础类型是存在栈中的，随着方法出栈则会回收，而堆中存的是对象，在未被引用时回收，所以通过包装类把基础类型转为对象，存放引用就可以解决这个问题）。</li><li>特点：查找和访问元素的速度较快，但新增，删除的速度较慢（为什么查询快，因为通过数组下标，并且数组是一段连续的内存空间，CPU 缓存机制也会缓存连续片段）</li><li>为了查询执行效率，未做同步，即线程不安全（要想安全可以用 Vector，想增删快，用 LinkedList）。</li><li>ArraryList 默认构造函数初始化为空数组，在首次 add 时进行初始化大小，默认值为 10；若指定大小，则初始化为指定大小的数组。</li><li>触发数组容量变化的时机：一是为空数组列表 add 元素时初始化数组容量为 10，二是新增元素发现数组容量不足，会扩容至原数组 1.5 倍（jdk8 采用右移一位的位运算，进一步优化了速度）</li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2><ul><li>Collection - ArrayList 源码解析https://www.pdai.tech/md/java/collection/java-collection-ArrayList.html</li><li>《进大厂系列》系列 - ArrayList https://zhuanlan.zhihu.com/p/101574379</li></ul>',18),e={render:function(n,s){return p}}}}]);