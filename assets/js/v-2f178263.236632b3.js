"use strict";(self.webpackChunkswbook=self.webpackChunkswbook||[]).push([[185],{9224:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-2f178263",path:"/about/about-algorithm-daily-challenge.html",title:"LeetCode  21 天挑战日志",lang:"zh-CN",frontmatter:{sidebar:"auto"},excerpt:"",headers:[{level:2,title:"为什么参加算法挑战 ？",slug:"为什么参加算法挑战",children:[]},{level:2,title:"第一周 数组",slug:"第一周-数组",children:[{level:3,title:"Day01 原地修改数组",slug:"day01-原地修改数组",children:[]},{level:3,title:"Day02 前缀和技巧",slug:"day02-前缀和技巧",children:[]},{level:3,title:"Day03 差分数组技巧",slug:"day03-差分数组技巧",children:[]},{level:3,title:"Day04 回文串的判断",slug:"day04-回文串的判断",children:[]},{level:3,title:"Day05 二分搜索原理",slug:"day05-二分搜索原理",children:[]},{level:3,title:"Day06 二分搜索运用",slug:"day06-二分搜索运用",children:[]},{level:3,title:"Day07 滑动窗口技巧",slug:"day07-滑动窗口技巧",children:[]}]},{level:2,title:"第二周 链表、队列、栈、二叉树",slug:"第二周-链表、队列、栈、二叉树",children:[{level:3,title:"Day08 链表技巧汇总",slug:"day08-链表技巧汇总",children:[]},{level:3,title:"Day09 队列和栈互转",slug:"day09-队列和栈互转",children:[]}]}],filePathRelative:"about/about-algorithm-daily-challenge.md"}},7411:(n,s,a)=>{a.r(s),a.d(s,{default:()=>Pn});var p=a(6252);const e=(0,p._)("h1",{id:"leetcode-21-天挑战日志",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#leetcode-21-天挑战日志","aria-hidden":"true"},"#"),(0,p.Uk)(" LeetCode 21 天挑战日志")],-1),t=(0,p._)("p",null,"写一个流水式日志，来记录自己在参加 21 天算法挑战过程中，刷题遇到的问题和一些想法：",-1),o=(0,p._)("h2",{id:"为什么参加算法挑战",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#为什么参加算法挑战","aria-hidden":"true"},"#"),(0,p.Uk)(" 为什么参加算法挑战 ？")],-1),l=(0,p._)("ol",null,[(0,p._)("li",null,"算法一直是自己久攻不下和很难坚持下去的弱项。"),(0,p._)("li",null,"许多大厂目前基本上都要考算法，即便是中小厂也会涉及算法题，虽然社招岗位对算法要求没有那么高，但是不能完全不会。"),(0,p._)("li",null,"培养算法的思维，我觉得学习算法就是学习计算机思维，从计算机的角度思考代码实现，在日后的实际工作中也能多一个分析角度，对了解许多技术底层原理和选择合适的底层数据结构都有所帮助。")],-1),c={href:"https://www.yuque.com/books/share/f7a1194d-fe2f-4096-8548-a470790543d2",target:"_blank",rel:"noopener noreferrer"},r=(0,p.Uk)("课程目录"),u=(0,p._)("h2",{id:"第一周-数组",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#第一周-数组","aria-hidden":"true"},"#"),(0,p.Uk)(" 第一周 数组")],-1),i=(0,p._)("h3",{id:"day01-原地修改数组",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#day01-原地修改数组","aria-hidden":"true"},"#"),(0,p.Uk)(" Day01 原地修改数组")],-1),k=(0,p._)("p",null,"今天是第一天，课程内容是「原地修改数组」",-1),m=(0,p._)("p",null,"必做作业有 2 题：",-1),b={href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("26. 删除排序数组中的重复项（简单）"),h={href:"https://leetcode-cn.com/problems/remove-element/",target:"_blank",rel:"noopener noreferrer"},g=(0,p.Uk)("27. 移除元素（简单）"),f=(0,p._)("p",null,"选做题有 2 题：",-1),y={href:"https://leetcode-cn.com/problems/move-zeroes/",target:"_blank",rel:"noopener noreferrer"},_=(0,p.Uk)("283. 移动零（简单）"),w={href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/",target:"_blank",rel:"noopener noreferrer"},v=(0,p.Uk)("83. 删除排序链表中的重复元素（简单）"),U=(0,p.uE)('<ul><li>整体感受：</li></ul><p>首先 4 题中有 2 题在 4 个月前刷过，分别是 27 和 283，即移除元素和移动零，虽然刷过，但是看完题目，依旧没什么思路，简单看了下课件分析后，回想起了双指针，所以后面解题思路就清晰一些，但是实际编码的质量不高，居然还会存在语法的问题舒适不应该，其次判断条件的临界值没弄清楚，导致频繁出现数组越界的问题。不过比前几个月刷题的感觉要顺手多了，可能是最近看了许多与底层数据结构相关的内容有关系。</p><ul><li>主要收获：</li></ul><p>学习到有关数组双指针和链表入门的解题思路：</p><ol><li>双指针如果都是从左开始移动遍历，那么其中有一个负责移动探路，另一个完成赋值或替换，其中优化的题解中，还引入中间临时变量 temp 来交换（移除零这题）看完题解后有被“哇”到；</li><li>双指针也可以是左指针和右指针同时像中间移动，时间复杂度进一步降低；</li><li>链表的解题思路关键点在于 node 中的 next 指向；</li></ol><h3 id="day02-前缀和技巧" tabindex="-1"><a class="header-anchor" href="#day02-前缀和技巧" aria-hidden="true">#</a> Day02 前缀和技巧</h3><p>今天的课程是「day2. 前缀和技巧」</p><p>必做作业有 1 题：</p>',8),x={href:"https://leetcode-cn.com/problems/subarray-sum-equals-k/",target:"_blank",rel:"noopener noreferrer"},W=(0,p.Uk)("560. 和为 K 的子数组（中等）"),D=(0,p._)("p",null,"选做题有 1 题：",-1),j={href:"https://leetcode-cn.com/problems/range-sum-query-2d-immutable/",target:"_blank",rel:"noopener noreferrer"},C=(0,p.Uk)("304. 二维区域和检索 - 矩阵不可变（中等）"),q=(0,p._)("ul",null,[(0,p._)("li",null,"整体感受：")],-1),I=(0,p._)("p",null,"对于数组的解题思路有了新的收获，对于采用哈希表结构的解法开始理解有一些吃力，看完动图题解后恍然大悟",-1),M=(0,p._)("ul",null,[(0,p._)("li",null,"主要收获：")],-1),E=(0,p._)("p",null,"前缀和的应用场景是，需要对某个区间 [i...j] 频繁查询累计和，避免每次查询都遍历这个区间。",-1),H=(0,p._)("h3",{id:"day03-差分数组技巧",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#day03-差分数组技巧","aria-hidden":"true"},"#"),(0,p.Uk)(" Day03 差分数组技巧")],-1),z=(0,p._)("p",null,"今天的课程是「day3：差分数组技巧」",-1),A=(0,p._)("p",null,"必做作业有 1 题：",-1),K={href:"https://leetcode-cn.com/problems/car-pooling/",target:"_blank",rel:"noopener noreferrer"},L=(0,p.Uk)("1094. 拼车（中等）"),O=(0,p._)("p",null,"选做题有 1 题：",-1),S={href:"https://leetcode-cn.com/problems/corporate-flight-bookings/",target:"_blank",rel:"noopener noreferrer"},N=(0,p.Uk)("1109. 航班预订统计（中等）"),P=(0,p._)("ul",null,[(0,p._)("li",null,"整体感受与收获：")],-1),R=(0,p._)("p",null,"与前缀和的思路差不多，学习到了差分数组：",-1),V=(0,p._)("p",null,"差分数组的应用场景是，需要对某个区间 [i...j] 频繁地加或减某一值，避免每次都遍历这个区间。比如拼车的题中，既有上车，也有下车，所以可以遍历每个站点，上车的加人，下车的减人。而航班预定的题思路则是，遍历每一个航班，涉及出航定订单加，后边不涉及的减，本质上也是利用分差数组，即求区间 [i,j]，则从 i 开始往后的求和，减去 j+1 往后的求和，就是 i 到 j 之间的和。",-1),Y=(0,p._)("h3",{id:"day04-回文串的判断",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#day04-回文串的判断","aria-hidden":"true"},"#"),(0,p.Uk)(" Day04 回文串的判断")],-1),B=(0,p._)("p",null,"今天的课程是「day4：回文串的判断」",-1),F=(0,p._)("p",null,"必做作业有 1 题：",-1),G={href:"https://leetcode-cn.com/problems/longest-palindromic-substring/",target:"_blank",rel:"noopener noreferrer"},J=(0,p.Uk)("5. 最长回文子串（中等）"),Q=(0,p._)("ul",null,[(0,p._)("li",null,"整体感受：")],-1),T=(0,p._)("p",null,"注意理解此题的陷阱，并不是简单的反转找重复字符串，而是要找到数组从中间开始往两头遍历查找。不过此题还需要多理解，对于解法有些疑惑。",-1),X=(0,p._)("h3",{id:"day05-二分搜索原理",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#day05-二分搜索原理","aria-hidden":"true"},"#"),(0,p.Uk)(" Day05 二分搜索原理")],-1),Z=(0,p._)("p",null,"今天的课程是「day5：二分搜索原理」",-1),$=(0,p._)("p",null,"必做作业有 1 题：",-1),nn={href:"https://leetcode-cn.com/problems/binary-search/",target:"_blank",rel:"noopener noreferrer"},sn=(0,p.Uk)("704. 二分查找（简单）"),an=(0,p._)("p",null,"选做题 1 道：",-1),pn={href:"https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/",target:"_blank",rel:"noopener noreferrer"},en=(0,p.Uk)("34. 在排序数组中查找元素的第一个和最后一个位置（中等）"),tn=(0,p.uE)('<ul><li>整体感受</li></ul><p>技巧汇总：</p><p>使用左闭右闭的方式时，有几个需要注意的点：</p><ol><li>rigth = nums.length - 1</li><li>while(left &lt;= right) 因为右闭，所以不能漏掉最后一个元素，此处是有“=”的</li><li>int mid = left + (right - left) / 2; 等同于 (left + right) / 2；并且可以避免数值越界</li><li>nums[mid] &lt; target 则移动 left，相反则移动 right</li></ol><p>附 :</p><details class="custom-container details"><summary>二分法写法框架</summary><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//全部采用左闭右闭的写法</span>\n<span class="token comment">//普通二分查找</span>\n<span class="token keyword">int</span> <span class="token function">binary_search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> \n    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> \n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 直接返回</span>\n            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 直接返回</span>\n    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//寻找左侧边界的二分查找，在最后需要检查left的越界情况</span>\n<span class="token keyword">int</span> <span class="token function">left_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 别返回，锁定左侧边界</span>\n            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 最后要检查left越界的情况</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;=</span> nums<span class="token punctuation">.</span>length <span class="token operator">||</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> left<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//寻找右侧边界的二分查找，在最后需要检查right的越界情况</span>\n<span class="token keyword">int</span> <span class="token function">right_bound</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 别返回，锁定右侧边界</span>\n            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 最后要检查 right 越界的情况</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> right<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div></details><h3 id="day06-二分搜索运用" tabindex="-1"><a class="header-anchor" href="#day06-二分搜索运用" aria-hidden="true">#</a> Day06 二分搜索运用</h3><p>大家早上好呀，今日份课程已经更新。</p><p>今天的课程是「day6：二分搜索运用」</p><p>必做作业有 1 题：</p>',10),on={href:"https://leetcode-cn.com/problems/koko-eating-bananas/",target:"_blank",rel:"noopener noreferrer"},ln=(0,p.Uk)("875.爱吃香蕉的珂珂（中等）"),cn=(0,p._)("p",null,"选做题 1 道：",-1),rn={href:"https://leetcode-cn.com/problems/capacity-to-ship-packages-within-d-days/",target:"_blank",rel:"noopener noreferrer"},un=(0,p.Uk)("1011.在D天内送达包裹的能力（中等）"),kn=(0,p.uE)('<ul><li>技巧</li></ul><p>想要用二分搜索算法解决问题，分为以下几步：</p><p><strong>1、确定</strong> <code>x, f(x), target</code> <strong>分别是什么，并写出函数</strong> <code>f</code> <strong>的代码</strong>。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">//这里写输入x和f(x)，返回具体的target，也就是输入对应数组下标和对应的值，反应出目标值的关系</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>2、找到</strong> <code>x</code> <strong>的取值范围作为二分搜索的搜索区间，初始化</strong> <code>left</code> <strong>和</strong> <code>right</code> <strong>变量</strong>。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token operator">?</span>\n<span class="token comment">//注意：有时候left，right如果已经给出，可以直接用，没有的话，则需要单独写一段逻辑计算</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>3、根据题目的要求，确定应该使用搜索左侧还是搜索右侧的二分搜索算法，写出解法代码</strong>。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token comment">//根据f(x)函数是查询左边界还是右边界来写逻辑</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token punctuation">}</span>els <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="day07-滑动窗口技巧" tabindex="-1"><a class="header-anchor" href="#day07-滑动窗口技巧" aria-hidden="true">#</a> Day07 滑动窗口技巧</h3><p>今天的课程是「day7：滑动窗口技巧」</p><p>必做作业有 1 题：</p>',11),mn={href:"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/",target:"_blank",rel:"noopener noreferrer"},bn=(0,p.Uk)("3.无重复字符的最长子串（中等）"),dn=(0,p._)("p",null,"选做题 3 道：",-1),hn={href:"https://leetcode-cn.com/problems/permutation-in-string/",target:"_blank",rel:"noopener noreferrer"},gn=(0,p.Uk)("567.字符串的排列（中等）"),fn={href:"https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/",target:"_blank",rel:"noopener noreferrer"},yn=(0,p.Uk)("438.找到字符串中所有字母异位词（中等）"),_n={href:"https://leetcode-cn.com/problems/minimum-window-substring/",target:"_blank",rel:"noopener noreferrer"},wn=(0,p.Uk)("76.最小覆盖子串（困难）"),vn=(0,p.uE)('<ul><li>思路</li></ul><ol><li>定义[left,right)的滑动窗口<strong>左闭右开</strong>区间</li><li>向右滑动right，寻找一个「可行解」</li><li>向右滑动left，优化「可行解」</li></ol><ul><li>代码框架</li></ul><details class="custom-container details"><summary>第 567 题案例</summary><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkInclusion</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        \n        <span class="token comment">// 整体思路就是：左闭右开区间，双指针，先扩大右指针，直到窗口符合要求，然后缩小左指针，直到窗口不满足要求，此时窗口中就是所求的字串</span>\n\n        <span class="token comment">/*\n         * 具体思路：\n         * 1. 先将需要匹配的字符串放入need的HashMap中\n         * 2. 移动右指针，将符合的字符放入窗口中，直到满足全部字串字符\n         * 3. 移动左指针，直到窗口中字符不满足停下\n         * 4. 此时窗口中右指针 - 左指针 + 1，则为对应的字串\n         */</span>\n\n        <span class="token comment">/* 滑动窗口框架 */</span>\n\n        <span class="token comment">//1.定义窗口，need为符合条件的窗口，window为滑动窗口</span>\n        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> need <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//2.将need要检查的字符串放入map中</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> s1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            need<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> need<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">//3.初始化左右指针和valid</span>\n        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * 滑动窗口前，需要考虑的4个问题\n         * 1、当移动 right 扩大窗口，即加入字符时，应该更新哪些数据？window++，valid++\n         * 2、什么条件下，窗口应该暂停扩大，开始移动 left 缩小窗口？当Valid == need中元素的个数\n         * 3、当移动 left 缩小窗口，即移出字符时，应该更新哪些数据？window--，valid--\n         * 4、我们要的结果应该在扩大窗口时还是缩小窗口时进行更新？缩小窗口\n         */</span>\n        <span class="token comment">//4.扩大窗口</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// c 是将移入窗口的字符</span>\n            <span class="token keyword">char</span> c <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//right++表示先赋值，后运算</span>\n            \n            <span class="token comment">// 进行窗口内数据的一系列更新</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                window<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//这一步是校验need和window中是否都有字符c，有说明匹配</span>\n                    valid<span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token comment">// 5.缩小窗口，判断左侧窗口是否要收缩</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">==</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 在这里更新最小覆盖子串</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>valid <span class="token operator">==</span> need<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token comment">// d 是将移出窗口的字符</span>\n                <span class="token keyword">char</span> d <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token comment">// 进行窗口内数据的一系列更新</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                        valid<span class="token operator">--</span><span class="token punctuation">;</span>\n                    window<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br></div></div></details><h2 id="第二周-链表、队列、栈、二叉树" tabindex="-1"><a class="header-anchor" href="#第二周-链表、队列、栈、二叉树" aria-hidden="true">#</a> 第二周 链表、队列、栈、二叉树</h2><h3 id="day08-链表技巧汇总" tabindex="-1"><a class="header-anchor" href="#day08-链表技巧汇总" aria-hidden="true">#</a> Day08 链表技巧汇总</h3><p>今天的课程是「day8：链表技巧汇总」</p><p>必做作业有 2 题：</p>',8),Un={href:"https://leetcode-cn.com/problems/linked-list-cycle/",target:"_blank",rel:"noopener noreferrer"},xn=(0,p.Uk)("141.环形链表（简单）"),Wn={href:"https://leetcode-cn.com/problems/middle-of-the-linked-list/",target:"_blank",rel:"noopener noreferrer"},Dn=(0,p.Uk)("876.链表的中间结点（简单）"),jn=(0,p._)("p",null,"选做题 3 道：",-1),Cn={href:"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/",target:"_blank",rel:"noopener noreferrer"},qn=(0,p.Uk)("160.相交链表（简单）"),In={href:"https://leetcode-cn.com/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"},Mn=(0,p.Uk)("142.环形链表II（简单）"),En={href:"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/",target:"_blank",rel:"noopener noreferrer"},Hn=(0,p.Uk)("19.删除链表倒数第 N 个元素（中等）"),zn=(0,p._)("h3",{id:"day09-队列和栈互转",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#day09-队列和栈互转","aria-hidden":"true"},"#"),(0,p.Uk)(" Day09 队列和栈互转")],-1),An=(0,p._)("p",null,"今天的课程是「day9：队列和栈互转」",-1),Kn=(0,p._)("p",null,"必做作业有 2 题：",-1),Ln={href:"https://leetcode-cn.com/problems/implement-queue-using-stacks/",target:"_blank",rel:"noopener noreferrer"},On=(0,p.Uk)("232.用栈实现队列（简单）"),Sn={href:"https://leetcode-cn.com/problems/implement-stack-using-queues/",target:"_blank",rel:"noopener noreferrer"},Nn=(0,p.Uk)("225.用队列实现栈（简单）"),Pn={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,t,o,l,(0,p._)("p",null,[(0,p._)("a",c,[r,(0,p.Wm)(a)])]),u,i,k,m,(0,p._)("p",null,[(0,p._)("a",b,[d,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",h,[g,(0,p.Wm)(a)])]),f,(0,p._)("p",null,[(0,p._)("a",y,[_,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",w,[v,(0,p.Wm)(a)])]),U,(0,p._)("p",null,[(0,p._)("a",x,[W,(0,p.Wm)(a)])]),D,(0,p._)("p",null,[(0,p._)("a",j,[C,(0,p.Wm)(a)])]),q,I,M,E,H,z,A,(0,p._)("p",null,[(0,p._)("a",K,[L,(0,p.Wm)(a)])]),O,(0,p._)("p",null,[(0,p._)("a",S,[N,(0,p.Wm)(a)])]),P,R,V,Y,B,F,(0,p._)("p",null,[(0,p._)("a",G,[J,(0,p.Wm)(a)])]),Q,T,X,Z,$,(0,p._)("p",null,[(0,p._)("a",nn,[sn,(0,p.Wm)(a)])]),an,(0,p._)("p",null,[(0,p._)("a",pn,[en,(0,p.Wm)(a)])]),tn,(0,p._)("p",null,[(0,p._)("a",on,[ln,(0,p.Wm)(a)])]),cn,(0,p._)("p",null,[(0,p._)("a",rn,[un,(0,p.Wm)(a)])]),kn,(0,p._)("p",null,[(0,p._)("a",mn,[bn,(0,p.Wm)(a)])]),dn,(0,p._)("p",null,[(0,p._)("a",hn,[gn,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",fn,[yn,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",_n,[wn,(0,p.Wm)(a)])]),vn,(0,p._)("p",null,[(0,p._)("a",Un,[xn,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",Wn,[Dn,(0,p.Wm)(a)])]),jn,(0,p._)("p",null,[(0,p._)("a",Cn,[qn,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",In,[Mn,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",En,[Hn,(0,p.Wm)(a)])]),zn,An,Kn,(0,p._)("p",null,[(0,p._)("a",Ln,[On,(0,p.Wm)(a)])]),(0,p._)("p",null,[(0,p._)("a",Sn,[Nn,(0,p.Wm)(a)])])],64)}}}}]);